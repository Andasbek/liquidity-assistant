import os
import json
import io
import requests
import pandas as pd
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt
from dotenv import load_dotenv

load_dotenv()

# ---- Config ----
DEFAULT_API = os.getenv("API_URL", "http://127.0.0.1:8000/api")
st.set_page_config(page_title="Liquidity Assistant", layout="wide")


# ---- Sidebar Settings ----
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
api_base = st.sidebar.text_input("API URL", value=DEFAULT_API, help="–ê–¥—Ä–µ—Å FastAPI, –Ω–∞–ø—Ä–∏–º–µ—Ä http://127.0.0.1:8000/api")
horizon = st.sidebar.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 7, 60, 14, 1)

import requests

def safe_get_json(url: str):
    try:
        r = requests.get(url, timeout=5)
        r.raise_for_status()
        return r.json(), None
    except Exception as e:
        return None, str(e)

st.markdown("### –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
col_h, col_l = st.columns(2)
with col_h:
    data, err = safe_get_json(f"{api_base}/health")
    if err or not data or data.get("status") != "ok":
        st.error(f"API: –Ω–µ—Ç —Å–≤—è–∑–∏ ({err or data})")
    else:
        st.success("API: OK")
with col_l:
    data, err = safe_get_json(f"{api_base}/llm/test")
    if err or not data:
        st.warning(f"LLM: –Ω–µ—Ç —Å–≤—è–∑–∏ ({err})")
    else:
        prov = data.get("provider") or "‚Äî"
        sample = data.get("sample") or ""
        if prov and not sample.startswith("error"):
            st.success(f"LLM: {prov} ‚Äî –≥–æ—Ç–æ–≤–æ")
        else:
            st.warning(f"LLM: –µ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥, –Ω–æ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π/–æ—à–∏–±–∫–∞ ({sample[:60]})")

st.sidebar.markdown("---")
st.sidebar.write("**–§–∞–π–ª—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö** (CSV):")
uploaded_bank = st.sidebar.file_uploader("bank_statements.csv", type=["csv"])
uploaded_pay = st.sidebar.file_uploader("payment_calendar.csv", type=["csv"])
uploaded_fx  = st.sidebar.file_uploader("fx_rates.csv", type=["csv"])
upload_btn = st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–µ–∫–µ–Ω–¥")

# ---- Session state ----
if "forecast" not in st.session_state:
    st.session_state["forecast"] = None
if "scenario" not in st.session_state:
    st.session_state["scenario"] = None
if "baseline_resp" not in st.session_state:
    st.session_state["baseline_resp"] = None
if "scenario_resp" not in st.session_state:
    st.session_state["scenario_resp"] = None
if "advice" not in st.session_state:
    st.session_state["advice"] = None

# ---- Helpers ----
def api_post(path: str, files=None, json_data=None):
    url = f"{api_base}{path}"
    try:
        if files:
            resp = requests.post(url, files=files, timeout=60)
        else:
            headers = {"Content-Type": "application/json"}
            resp = requests.post(url, data=json.dumps(json_data or {}), headers=headers, timeout=60)
        resp.raise_for_status()
        return resp.json(), None
    except requests.RequestException as e:
        if getattr(e, "response", None) is not None:
            try:
                return None, f"{e} ‚Äî {e.response.text}"
            except Exception:
                return None, str(e)
        return None, str(e)

def plot_forecast(forecast_points: list, title: str):
    if not forecast_points:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return
    df = pd.DataFrame(forecast_points)
    df["date"] = pd.to_datetime(df["date"])
    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(df["date"], df["cash_balance"], label="Cash balance")
    ax.bar(df["date"], df["net_cash"], alpha=0.3, label="Net cash (bar)")
    ax.set_title(title)
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–°—É–º–º–∞, KZT")
    ax.legend()
    st.pyplot(fig)
    return df

# ---- Upload ----
if upload_btn:
    if not (uploaded_bank and uploaded_pay and uploaded_fx):
        st.sidebar.error("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ç—Ä–∏ —Ñ–∞–π–ª–∞ CSV.")
    else:
        files = [
                ("files", ("bank_statements.csv", uploaded_bank.getvalue(), "text/csv")),
                ("files", ("payment_calendar.csv", uploaded_pay.getvalue(), "text/csv")),
                ("files", ("fx_rates.csv", uploaded_fx.getvalue(), "text/csv"))
            ]
        data, err = api_post("/upload", files=files)
        if err:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {err}")
        else:
            st.sidebar.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {data.get('loaded')}")
            # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞—Å—á–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            st.session_state["forecast"] = None
            st.session_state["scenario"] = None
            st.session_state["baseline_resp"] = None
            st.session_state["scenario_resp"] = None
            st.session_state["advice"] = None

st.title("üíß Liquidity Assistant ‚Äî –î–∞—à–±–æ—Ä–¥")

# ---- Forecast Section ----
st.header("1) –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
colF1, colF2 = st.columns([1, 1])

with colF1:
    if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
        payload = {"horizon_days": horizon}
        resp, err = api_post("/forecast", json_data=payload)
        if err:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {err}")
        else:
            st.session_state["forecast"] = resp.get("forecast")
            st.session_state["baseline_resp"] = resp
            st.success("–ì–æ—Ç–æ–≤–æ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å—á–∏—Ç–∞–Ω.")
            plot_forecast(st.session_state["forecast"], "–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ Cash balance (–≥–æ—Ä–∏–∑–æ–Ω—Ç)")

with colF2:
    if st.session_state["baseline_resp"]:
        m = st.session_state["baseline_resp"].get("metrics", {})
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—á–µ—Ä–Ω–æ–≤—ã–µ)")
        st.write({k: round(v, 3) for k, v in m.items()})

# ---- Scenario Section ----
st.header("2) –°—Ü–µ–Ω–∞—Ä–∏–∏ 'what-if'")
colS1, colS2, colS3, colS4 = st.columns(4)
with colS1:
    fx_shock = st.number_input("–®–æ–∫ FX (–¥–æ–ª—è, –Ω–∞–ø—Ä. 0.1 = +10%)", value=0.10, step=0.05, format="%.2f")
with colS2:
    d_in = st.number_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –∫—Ä—É–ø–Ω–µ–π—à–µ–≥–æ inflow (–¥–Ω.)", value=0, min_value=0, max_value=30, step=1)
with colS3:
    d_out = st.number_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –∫—Ä—É–ø–Ω–µ–π—à–µ–≥–æ outflow (–¥–Ω.)", value=0, min_value=0, max_value=30, step=1)
with colS4:
    st.write("")  # spacer
    run_scenario = st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", type="secondary")

if run_scenario:
    payload = {
        "horizon_days": horizon,
        "fx_shock": fx_shock,
        "delay_top_inflow_days": int(d_in),
        "delay_top_outflow_days": int(d_out),
    }
    resp, err = api_post("/scenario", json_data=payload)
    if err:
        st.error(f"–û—à–∏–±–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {err}")
    else:
        st.session_state["scenario"] = resp.get("forecast_scenario")
        st.session_state["scenario_resp"] = resp
        st.success("–°—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–Ω.")
        plot_forecast(st.session_state["scenario"], "–°—Ü–µ–Ω–∞—Ä–∏–π: Cash balance –ø—Ä–∏ —à–æ–∫–∞—Ö")

# ---- Advice Section ----
st.header("3) –°–æ–≤–µ—Ç –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º (Advisor)")
colA1, colA2 = st.columns([1, 1])
with colA1:
    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç"):
        if not (st.session_state["baseline_resp"] and st.session_state["scenario_resp"]):
            st.warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Å—Ü–µ–Ω–∞—Ä–∏–π.")
        else:
            payload = {
                "baseline": st.session_state["baseline_resp"],
                "scenario": st.session_state["scenario_resp"]
            }
            resp, err = api_post("/advice", json_data=payload)
            if err:
                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–≤–µ—Ç–∞: {err}")
            else:
                st.session_state["advice"] = resp
                st.success("–°–æ–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

with colA2:
    if st.session_state["advice"]:
        st.subheader("–¢–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–∞")
        st.write(st.session_state["advice"].get("advice_text", ""))

        st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
        actions = st.session_state["advice"].get("actions", [])
        if actions:
            st.dataframe(pd.DataFrame(actions))
        else:
            st.info("–î–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç ‚Äî —Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")

# ---- Download Brief (Markdown) ----
st.header("4) –≠–∫—Å–ø–æ—Ä—Ç –∫—Ä–∞—Ç–∫–æ–≥–æ –±—Ä–∏—Ñ–∞ (Markdown)")
if st.session_state["baseline_resp"] or st.session_state["scenario_resp"] or st.session_state["advice"]:
    brief = io.StringIO()
    brief.write("# Liquidity Assistant ‚Äî –ë—Ä–∏—Ñ –¥–ª—è CFO\n\n")
    if st.session_state["baseline_resp"]:
        brief.write("## –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑\n")
        m = st.session_state["baseline_resp"].get("metrics", {})
        brief.write(f"- sMAPE: {round(m.get('smape', 0.0), 3)}\n")
    if st.session_state["scenario_resp"]:
        brief.write("\n## –°—Ü–µ–Ω–∞—Ä–∏–π\n")
        brief.write(f"- min_cash: {st.session_state['scenario_resp'].get('min_cash', 'N/A')}\n")
        m2 = st.session_state["scenario_resp"].get("metrics", {})
        brief.write(f"- sMAPE (scenario): {round(m2.get('smape', 0.0), 3)}\n")
    if st.session_state["advice"]:
        brief.write("\n## –°–æ–≤–µ—Ç\n")
        brief.write(st.session_state["advice"].get("advice_text", "") + "\n")
        acts = st.session_state["advice"].get("actions", [])
        if acts:
            brief.write("\n### –î–µ–π—Å—Ç–≤–∏—è\n")
            for a in acts:
                brief.write(f"- {a.get('title')} ‚Äî ~{a.get('amount')} ({a.get('rationale')})\n")

    st.download_button("–°–∫–∞—á–∞—Ç—å –±—Ä–∏—Ñ.md", brief.getvalue().encode("utf-8"), file_name="liquidity_brief.md", mime="text/markdown")
else:
    st.info("–ü–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–æ–≤ –≤—ã —Å–º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∏—Ñ.")
